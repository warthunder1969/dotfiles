#!/usr/bin/env bash
############################################################################
#
# Version 1.2.0
#
# Usage: convert-footage [options] file-or-folder
#
# Convert file to Davinci Resolve 14 compatible format.
#
# Options:
#  -h               ... help message
#  -q n             ... quality of the encoded video. Defaults to 1 for
#                       best quality.
#  -e               ... show all example usages
#
# Examples:
#
# Convert folder ../myvideos with best quality (default)
#  convert-footage ../myvideos
#
# Please use convert-footage -e for more examples.
#
############################################################################

# exit when a command fails
set -o errexit
# return the exit status of the last command that threw a non-zero exit code
set -o pipefail
# exit when script tries to use undeclared variables
set -o nounset

main() {
  #defaults
  local quality=1
  #getopts initialization for usage in function
  local OPTIND opt


  while getopts ":heq:" opt; do
    case "${opt}" in
      h)
          print_usage
          exit
          ;;
      e)  print_examples
          exit
          ;;
      q)
          quality="${OPTARG}"
          if ! is_between_1_and_31 "${quality}"; then
            print_error "Quality needs to be a positive integer between 1 and 31. The lower the value, the better the quality."
            print_usage
            exit 1
          fi
          ;;
      \?)
          print_error "Invalid option: ${OPTARG}" >&2
          print_usage
          exit 1
          ;;
    esac
  done

  shift "$((OPTIND-1))"

  if [ ${#} -lt 1 ] ; then
    print_error "You need to specify a file or folder."
    print_usage
    exit 1
  fi

  local fileOrFolder="${1}"
  if [[ -d "${fileOrFolder}" ]]; then
    convert_folder "${1}" "${quality}"
  elif [[ -f "${fileOrFolder}" ]]; then
    convert_file "${1}" "${quality}"
  else
    print_error "File or folder ${fileOrFolder} not found."
    exit 1
  fi
  exit
}

print_usage() {
  echo "
$(cat "$0" | gawk '/^####/,/^$/')
"
}

print_examples() {
  echo "

# Convert current folder with best quality (default)

  convert-footage .

# Convert the current folder with quality 2

  convert-footage -q 2 .

# Convert folder ../myvideos with best quality (default)

  convert-footage ../myvideos

# Convert file ./myvideo.mp4 with quality 2

  convert-footage -q 2 ./myvideo.mp4

# Show help

  convert-footage -h

"
}

print_hint()
{
  echo -e "\033[93m${1}\033[0m"
}

print_error()
{
  (>&2 echo -e "\033[91m${1}\033[0m")
}

is_between_1_and_31() {
  [[ "${1}" =~ ^[0-9]+$ ]] && [ "${1}" -ge 1 -a "${1}" -le 31 ]
}

convert_folder() {
  local folder="${1}"
  local quality="${2}"
  # TODO make output filename and location configurable
  local files=()

  # read into array files the following:
  # * find all files in folder
  # * extract the path + mime type
  # * filter video and strip mime type
  readarray files < <(find "${folder}" -type f \
    -exec file -N -i {} + |\
    sed -n 's!: video/[^:]*$!!p')
  # no files found? Exit with hint.
  if [ ${#files[@]} -eq 0 ]; then
    print_hint "Couldn't find any files to convert."
    exit 0
  fi
  for f in "${files[@]}"; do
    # pass file with stripped trailing newline to convert_file
    convert_file "${f%$'\n'}" "${quality}"
  done
}

convert_file() {
  local file="${1}"
  local quality="${2}"
  local target="${file}_conv.mov"
  local patternForResultingFile=".*_conv\.mov$"
  # prevent converting of already converted files
  if [[ "${file}" =~ $patternForResultingFile ]]; then
    print_hint "Result of prior conversion: ${file} – will not convert."
    return
  fi
  # prevent overwriting of already converted files (prevent converting a file again)
  # TODO skip already converted files only if source is not newer
  if [[ -f "${target}" ]]; then
    print_hint "Converted file exists: ${target} for ${file} – will not convert."
    return
  fi
  # output action
  print_hint "Converting ${file} with quality ${quality} to ${target}"
  # actually perform action
  ffmpeg -i "${file}" -strict -2 -c:v libxvid -q:v "${quality}" -c:a pcm_s16le "${target}"
}

main "$@"
